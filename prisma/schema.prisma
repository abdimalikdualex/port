// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  hashedPassword String?
  image          String?
  role           Role          @default(STUDENT)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  purchases      Purchase[]
  comments       Comment[]
  supportChats   SupportChat[]
}

enum Role {
  STUDENT
  ADMIN
  SUPER_ADMIN
}

model Course {
  id          String     @id @default(cuid())
  title       String
  description String     @db.Text
  price       Float
  imageUrl    String?
  category    String
  level       String
  duration    String
  lectures    Int
  instructor  String
  featured    Boolean    @default(false)
  published   Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  videos      Video[]
  materials   Material[]
  purchases   Purchase[]
  comments    Comment[]
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  url         String
  duration    Int      // in seconds
  order       Int
  isPreview   Boolean  @default(false)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Material {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  fileUrl     String
  fileType    String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Purchase {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId      String
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount        Float
  currency      String   @default("USD")
  paymentMethod String
  transactionId String?
  status        String   @default("completed")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, courseId])
}

model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Comment[] @relation("CommentToComment")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SupportChat {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  status    ChatStatus @default(OPEN)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum ChatStatus {
  OPEN
  CLOSED
  PENDING
}

model Message {
  id            String      @id @default(cuid())
  content       String      @db.Text
  isFromAdmin   Boolean     @default(false)
  supportChatId String
  supportChat   SupportChat @relation(fields: [supportChatId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
}
